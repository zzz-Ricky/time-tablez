import { handleTimeZoneDTSTART, handleTimeZoneDTEND, parseICSToDate } from "./icsParser";

/*
   ad88  88                        88    ,ad8888ba,                                                                             888888888888  88
  d8"    ""                        88   d8"'    `"8b                                                                                 88       ""
  88                               88  d8'                                                                                           88
MM88MMM  88  8b,dPPYba,    ,adPPYb,88  88              ,adPPYba,   88,dPYba,,adPYba,   88,dPYba,,adPYba,    ,adPPYba,   8b,dPPYba,   88       88  88,dPYba,,adPYba,    ,adPPYba,  ,adPPYba,
  88     88  88P'   `"8a  a8"    `Y88  88             a8"     "8a  88P'   "88"    "8a  88P'   "88"    "8a  a8"     "8a  88P'   `"8a  88       88  88P'   "88"    "8a  a8P_____88  I8[    ""
  88     88  88       88  8b       88  Y8,            8b       d8  88      88      88  88      88      88  8b       d8  88       88  88       88  88      88      88  8PP"""""""   `"Y8ba,
  88     88  88       88  "8a,   ,d88   Y8a.    .a8P  "8a,   ,a8"  88      88      88  88      88      88  "8a,   ,a8"  88       88  88       88  88      88      88  "8b,   ,aa  aa    ]8I
  88     88  88       88   `"8bbdP"Y8    `"Y8888Y"'    `"YbbdP"'   88      88      88  88      88      88   `"YbbdP"'   88       88  88       88  88      88      88   `"Ybbd8"'  `"YbbdP"'
Accepts an array of schedules returned by groupEventsByDay (icsParser.js) and summarizes them as a single schedule object.
Each event is stripped of its info except for a standardized summary, start date, and end date attribute, to allow for easier comparison.
Calls calculateTimeOverlap once the summary has been generated, and returns the final output of that function.
(summary is included to help with debugging and potentially allow the script to recognize common event types in the future)
*/
export function findCommonTimes(Schedules) {
    var occupiedTimes = {
    "Monday": [],
    "Tuesday": [],
    "Wednesday": [],
    "Thursday": [],
    "Friday": [],
    "Saturday": [],
    "Sunday": []
  };
  // Parse all Schedules
for (const Schedule of Schedules){
  for (const Day in Schedule) {
    if (!occupiedTimes[Day]) {
      occupiedTimes[Day] = [];
    }
    for (const event of Schedule[Day]) {
      const eventSummary = event['SUMMARY'];
      const DTSTART = handleTimeZoneDTSTART(event);
      const eventStartDate = parseICSToDate(event[DTSTART]);
      const DTEND = handleTimeZoneDTEND(event);
      const eventEndDate = parseICSToDate(event[DTEND]);
      occupiedTimes[Day].push({
        summary: eventSummary,
        startDate: eventStartDate,
        endDate: eventEndDate,
      });
    }
  }
}

  const timeProfile = calculateTimeOverlap(occupiedTimes);
  return timeProfile
}

/*

                        88                           88                             888888888888  88                                    ,ad8888ba,                                         88
                        88                           88                ,d                88       ""                                   d8"'    `"8b                                        88
                        88                           88                88                88                                           d8'        `8b                                       88
 ,adPPYba,  ,adPPYYba,  88   ,adPPYba,  88       88  88  ,adPPYYba,  MM88MMM  ,adPPYba,  88       88  88,dPYba,,adPYba,    ,adPPYba,  88          88  8b       d8   ,adPPYba,  8b,dPPYba,  88  ,adPPYYba,  8b,dPPYba,
a8"     ""  ""     `Y8  88  a8"     ""  88       88  88  ""     `Y8    88    a8P_____88  88       88  88P'   "88"    "8a  a8P_____88  88          88  `8b     d8'  a8P_____88  88P'   "Y8  88  ""     `Y8  88P'    "8a
8b          ,adPPPPP88  88  8b          88       88  88  ,adPPPPP88    88    8PP"""""""  88       88  88      88      88  8PP"""""""  Y8,        ,8P   `8b   d8'   8PP"""""""  88          88  ,adPPPPP88  88       d8
"8a,   ,aa  88,    ,88  88  "8a,   ,aa  "8a,   ,a88  88  88,    ,88    88,   "8b,   ,aa  88       88  88      88      88  "8b,   ,aa   Y8a.    .a8P     `8b,d8'    "8b,   ,aa  88          88  88,    ,88  88b,   ,a8"
 `"Ybbd8"'  `"8bbdP"Y8  88   `"Ybbd8"'   `"YbbdP'Y8  88  `"8bbdP"Y8    "Y888  `"Ybbd8"'  88       88  88      88      88   `"Ybbd8"'    `"Y8888Y"'        "8"       `"Ybbd8"'  88          88  `"8bbdP"Y8  88`YbbdP"'
Accepts a summarized schedule generated by findCommonTimes and uses this information to determine occupied time periods.
Events are generally assumed to conflict with other events, and common event voids are considered to be free time.
*/
function calculateTimeOverlap(occupiedTimes) {
  let commonFreeTime = [];
  let conflictTime = [];

  // Get the current week's start and end dates
  const { startOfWeek, endOfWeek } = getCurrentWeekDates();

  for (const day in occupiedTimes) {
    let events = occupiedTimes[day];

    // Sort events by start time
    let sortedEvents = events.sort((a, b) => (a.startDate.getHours() + ((a.startDate.getMinutes())/60) + ((a.startDate.getSeconds())/3600)) - (b.startDate.getHours() + ((b.startDate.getMinutes())/60) + ((b.startDate.getSeconds())/3600)));

    let currentDayStart = getFullDayStart(day, startOfWeek);
    let currentDayEnd = getFullDayEnd(day, startOfWeek);

    //Last end time refers to the last time an event ended. By default, this is the beginning of the day.
    let lastEndTime = currentDayStart;
    // Process events to determine free and conflict times
    for (let event of sortedEvents) {
      let calculatedEventStartTime = (event.startDate.getHours() + ((event.startDate.getMinutes())/60) + ((event.startDate.getSeconds())/3600));
      let calculatedLastEndTime = (lastEndTime.getHours() + ((lastEndTime.getMinutes())/60) + ((lastEndTime.getSeconds())/3600))
      if (calculatedEventStartTime > calculatedLastEndTime) {
        commonFreeTime.push({ startDate: lastEndTime, endDate: event.startDate, day: day });
        lastEndTime = event.endDate
      }
      // Mark the event duration as conflict time
      conflictTime.push({ startDate: event.startDate, endDate: event.endDate, day: day });
      lastEndTime = new Date(Math.max(lastEndTime, event.endDate));
    }

    // After processing all events, check if there's any free time left until the end of the day
    if (1) {
      commonFreeTime.push({ startDate: lastEndTime, endDate: currentDayEnd, day: day });
    }
  }

  let timeProfile = { commonFreeTime, conflictTime };
  return timeProfile;
}
/*
                                    ,ad8888ba,                                                                       I8,        8        ,8I                        88         88888888ba,
                           ,d      d8"'    `"8b                                                                 ,d   `8b       d8b       d8'                        88         88      `"8b                 ,d
                           88     d8'                                                                           88    "8,     ,8"8,     ,8"                         88         88        `8b                88
 ,adPPYb,d8   ,adPPYba,  MM88MMM  88             88       88  8b,dPPYba,  8b,dPPYba,   ,adPPYba,  8b,dPPYba,  MM88MMM  Y8     8P Y8     8P   ,adPPYba,   ,adPPYba,  88   ,d8   88         88  ,adPPYYba,  MM88MMM  ,adPPYba,  ,adPPYba,
a8"    `Y88  a8P_____88    88     88             88       88  88P'   "Y8  88P'   "Y8  a8P_____88  88P'   `"8a   88     `8b   d8' `8b   d8'  a8P_____88  a8P_____88  88 ,a8"    88         88  ""     `Y8    88    a8P_____88  I8[    ""
8b       88  8PP"""""""    88     Y8,            88       88  88          88          8PP"""""""  88       88   88      `8a a8'   `8a a8'   8PP"""""""  8PP"""""""  8888[      88         8P  ,adPPPPP88    88    8PP"""""""   `"Y8ba,
"8a,   ,d88  "8b,   ,aa    88,     Y8a.    .a8P  "8a,   ,a88  88          88          "8b,   ,aa  88       88   88,      `8a8'     `8a8'    "8b,   ,aa  "8b,   ,aa  88`"Yba,   88      .a8P   88,    ,88    88,   "8b,   ,aa  aa    ]8I
 `"YbbdP"Y8   `"Ybbd8"'    "Y888    `"Y8888Y"'    `"YbbdP'Y8  88          88           `"Ybbd8"'  88       88   "Y888     `8'       `8'      `"Ybbd8"'   `"Ybbd8"'  88   `Y8a  88888888Y"'    `"8bbdP"Y8    "Y888  `"Ybbd8"'  `"YbbdP"'
 aa,    ,88
  "Y8bbdP"
Function to get the current week's start and end dates.
Allows us to access this data without having to pass "range" as an additional parameter to the parent function.
*/
function getCurrentWeekDates() {
  const currentDate = new Date();
  const currentDayOfWeek = currentDate.getDay(); // 0 (Sunday) to 6 (Saturday)
  const startOfWeek = new Date(currentDate);
  startOfWeek.setDate(startOfWeek.getDate() - currentDayOfWeek); // Set to the first day (Sunday) of the current week
  startOfWeek.setHours(0, 0, 0, 0);

  const endOfWeek = new Date(currentDate);
  endOfWeek.setDate(endOfWeek.getDate() + (6 - currentDayOfWeek)); // Set to the last day (Saturday) of the current week
  endOfWeek.setHours(23, 59, 59, 999);

  return { startOfWeek, endOfWeek };
}
/*
                                  88888888888           88  88  88888888ba,                              ad88888ba
                           ,d     88                    88  88  88      `"8b                            d8"     "8b  ,d                               ,d
                           88     88                    88  88  88        `8b                           Y8,          88                               88
 ,adPPYb,d8   ,adPPYba,  MM88MMM  88aaaaa  88       88  88  88  88         88  ,adPPYYba,  8b       d8  `Y8aaaaa,  MM88MMM  ,adPPYYba,  8b,dPPYba,  MM88MMM
a8"    `Y88  a8P_____88    88     88"""""  88       88  88  88  88         88  ""     `Y8  `8b     d8'    `"""""8b,  88     ""     `Y8  88P'   "Y8    88
8b       88  8PP"""""""    88     88       88       88  88  88  88         8P  ,adPPPPP88   `8b   d8'           `8b  88     ,adPPPPP88  88            88
"8a,   ,d88  "8b,   ,aa    88,    88       "8a,   ,a88  88  88  88      .a8P   88,    ,88    `8b,d8'    Y8a     a8P  88,    88,    ,88  88            88,
 `"YbbdP"Y8   `"Ybbd8"'    "Y888  88        `"YbbdP'Y8  88  88  88888888Y"'    `"8bbdP"Y8      Y88'      "Y88888P"   "Y888  `"8bbdP"Y8  88            "Y888
 aa,    ,88                                                                                    d8'
  "Y8bbdP"                                                                                    d8'
Function to get the start of a given day interval.
*/
function getFullDayStart(day, startOfWeek) {
  const dayDiff = { 'Sunday': 0, 'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4, 'Friday': 5, 'Saturday': 6 };
  const startOfDay = new Date(startOfWeek);
  startOfDay.setDate(startOfWeek.getDate() + dayDiff[day]); // Adjust to the specific day of the week
  startOfDay.setHours(0, 0, 0, 0); // Set to the start of the day
  return startOfDay;
}
/*
                                  88888888888           88  88  88888888ba,                             88888888888                        88
                           ,d     88                    88  88  88      `"8b                            88                                 88
                           88     88                    88  88  88        `8b                           88                                 88
 ,adPPYb,d8   ,adPPYba,  MM88MMM  88aaaaa  88       88  88  88  88         88  ,adPPYYba,  8b       d8  88aaaaa      8b,dPPYba,    ,adPPYb,88
a8"    `Y88  a8P_____88    88     88"""""  88       88  88  88  88         88  ""     `Y8  `8b     d8'  88"""""      88P'   `"8a  a8"    `Y88
8b       88  8PP"""""""    88     88       88       88  88  88  88         8P  ,adPPPPP88   `8b   d8'   88           88       88  8b       88
"8a,   ,d88  "8b,   ,aa    88,    88       "8a,   ,a88  88  88  88      .a8P   88,    ,88    `8b,d8'    88           88       88  "8a,   ,d88
 `"YbbdP"Y8   `"Ybbd8"'    "Y888  88        `"YbbdP'Y8  88  88  88888888Y"'    `"8bbdP"Y8      Y88'     88888888888  88       88   `"8bbdP"Y8
 aa,    ,88                                                                                    d8'
  "Y8bbdP"                                                                                    d8'
Function to get the end of the full day interval
*/
function getFullDayEnd(day, startOfWeek) {
  const startOfDay = getFullDayStart(day, startOfWeek);
  const endOfDay = new Date(startOfDay);
  endOfDay.setHours(23, 59, 59, 999); // Set to the end of the day
  return endOfDay;
}

/*
                                                            88888888ba,                               888888888888          88888888ba                          88           88
                                                            88      `"8b                 ,d                88               88      "8b                         ""    ,d     ""
                                                            88        `8b                88                88               88      ,8P                               88
8b,dPPYba,   ,adPPYYba,  8b,dPPYba,  ,adPPYba,   ,adPPYba,  88         88  ,adPPYYba,  MM88MMM  ,adPPYba,  88   ,adPPYba,   88aaaaaa8P'  ,adPPYba,   ,adPPYba,  88  MM88MMM  88   ,adPPYba,   8b,dPPYba,
88P'    "8a  ""     `Y8  88P'   "Y8  I8[    ""  a8P_____88  88         88  ""     `Y8    88    a8P_____88  88  a8"     "8a  88""""""'   a8"     "8a  I8[    ""  88    88     88  a8"     "8a  88P'   `"8a
88       d8  ,adPPPPP88  88           `"Y8ba,   8PP"""""""  88         8P  ,adPPPPP88    88    8PP"""""""  88  8b       d8  88          8b       d8   `"Y8ba,   88    88     88  8b       d8  88       88
88b,   ,a8"  88,    ,88  88          aa    ]8I  "8b,   ,aa  88      .a8P   88,    ,88    88,   "8b,   ,aa  88  "8a,   ,a8"  88          "8a,   ,a8"  aa    ]8I  88    88,    88  "8a,   ,a8"  88       88
88`YbbdP"'   `"8bbdP"Y8  88          `"YbbdP"'   `"Ybbd8"'  88888888Y"'    `"8bbdP"Y8    "Y888  `"Ybbd8"'  88   `"YbbdP"'   88           `"YbbdP"'   `"YbbdP"'  88    "Y888  88   `"YbbdP"'   88       88
88
88
Converts a JS time object to a position within the calendar. This is convenient for events which contain the easier to handle date object.
Returns an offset value in pixels for the calendar.
*/
export function parseDateToPosition(dateTimeObject) {
  const hour = dateTimeObject.getHours();
  const minute = dateTimeObject.getMinutes();
  const second = dateTimeObject.getSeconds();
  const overallTime = (Number(hour) + Number(minute/60) + Number(second/3600))/24;
  const overallPosition = (overallTime*920)+45;
  /* 12AM = top:20px, each subsequent hour is offset by 45px, hence the formula */
  return overallPosition;
};

/*
                                                            88888888ba,                               888888888888          88                                                         88
                                                            88      `"8b                 ,d                88               88                                                  ,d     88
                                                            88        `8b                88                88               88                                                  88     88
8b,dPPYba,   ,adPPYYba,  8b,dPPYba,  ,adPPYba,   ,adPPYba,  88         88  ,adPPYYba,  MM88MMM  ,adPPYba,  88   ,adPPYba,   88           ,adPPYba,  8b,dPPYba,    ,adPPYb,d8  MM88MMM  88,dPPYba,
88P'    "8a  ""     `Y8  88P'   "Y8  I8[    ""  a8P_____88  88         88  ""     `Y8    88    a8P_____88  88  a8"     "8a  88          a8P_____88  88P'   `"8a  a8"    `Y88    88     88P'    "8a
88       d8  ,adPPPPP88  88           `"Y8ba,   8PP"""""""  88         8P  ,adPPPPP88    88    8PP"""""""  88  8b       d8  88          8PP"""""""  88       88  8b       88    88     88       88
88b,   ,a8"  88,    ,88  88          aa    ]8I  "8b,   ,aa  88      .a8P   88,    ,88    88,   "8b,   ,aa  88  "8a,   ,a8"  88          "8b,   ,aa  88       88  "8a,   ,d88    88,    88       88
88`YbbdP"'   `"8bbdP"Y8  88          `"YbbdP"'   `"Ybbd8"'  88888888Y"'    `"8bbdP"Y8    "Y888  `"Ybbd8"'  88   `"YbbdP"'   88888888888  `"Ybbd8"'  88       88   `"YbbdP"Y8    "Y888  88       88
88                                                                                                                                                                aa,    ,88
88                                                                                                                                                                 "Y8bbdP"
Converts a pair of JS time objects to the duration of an event. This is convenient for events which contain the easier to handle date object.
Returns a height in pixels for the calendar.
*/
  export function parseDateToLength(InitialTime, EndTime) {
    // Initial Time
    const initHour = InitialTime.getHours();
    const initMinute = InitialTime.getMinutes();
    const initSecond = InitialTime.getSeconds();
    const initTimeSum = (Number(initHour) + Number(initMinute/60) + Number(initSecond/3600))/24;
    // End Time
    const endHour = EndTime.getHours();
    const endMinute = EndTime.getMinutes();
    const endSecond = EndTime.getSeconds();
    const endTimeSum = (Number(endHour) + Number(endMinute/60) + Number(endSecond/3600))/24;
    // Calculate difference to find height
    const overallTime = endTimeSum-initTimeSum;
    if (overallTime > 0 && overallTime){
      const overallHeight = (overallTime*920);;
      return overallHeight;
    }
    else{
      return 900;
    }
  };
